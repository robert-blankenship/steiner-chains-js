// Generated by CoffeeScript 1.10.0
(function() {
  var drawFractal;

  console.log('hello world');

  drawFractal = function(s, depth) {
    var canvas, context, drawCircles, drawSameFractal, rotateAroundPoint;
    canvas = document.getElementById('canvas');
    canvas.width = s;
    canvas.height = s;
    context = canvas.getContext('2d');
    rotateAroundPoint = function(x1, y1, radians) {
      context.translate(x1, y1);
      context.rotate(radians);
      return context.translate(-x1, -y1);
    };
    drawCircles = function(parentCircleRadius, context, numberOfCircles) {
      var angleEnd, angleStart, circle, i, r, ref, results;
      r = parentCircleRadius * Math.sin(Math.PI / numberOfCircles) / (1 + Math.sin(Math.PI / numberOfCircles));
      angleStart = 0;
      angleEnd = 2 * Math.PI;
      results = [];
      for (circle = i = 1, ref = numberOfCircles; 1 <= ref ? i <= ref : i >= ref; circle = 1 <= ref ? ++i : --i) {
        rotateAroundPoint(s / 2, parentCircleRadius, 2 * Math.PI / numberOfCircles);
        context.beginPath();
        context.arc(r, parentCircleRadius, r, angleStart, angleEnd);
        results.push(context.stroke());
      }
      return results;
    };
    drawSameFractal = function(parentCircleRadius, context, depth, maxDepth, numberOfCircles) {
      var angleEnd, angleStart, circle, i, r, ref, results;
      r = parentCircleRadius * Math.sin(Math.PI / numberOfCircles) / (1 + Math.sin(Math.PI / numberOfCircles));
      angleStart = 0;
      angleEnd = 2 * Math.PI;
      results = [];
      for (circle = i = 1, ref = numberOfCircles; 1 <= ref ? i <= ref : i >= ref; circle = 1 <= ref ? ++i : --i) {
        rotateAroundPoint(parentCircleRadius, s / 2, 2 * Math.PI / numberOfCircles);
        context.beginPath();
        context.arc(r, s / 2, r, angleStart, angleEnd);
        context.stroke();
        if (depth < maxDepth) {
          results.push(drawSameFractal(r, context, depth + 1, maxDepth, numberOfCircles));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    drawFractal = function(parentCircleRadius, context, fractalArray) {
      var angleEnd, angleStart, circle, i, numberOfCircles, r, ref, results;
      numberOfCircles = fractalArray[0];
      r = parentCircleRadius * Math.sin(Math.PI / numberOfCircles) / (1 + Math.sin(Math.PI / numberOfCircles));
      angleStart = 0;
      angleEnd = 2 * Math.PI;
      results = [];
      for (circle = i = 1, ref = numberOfCircles; 1 <= ref ? i <= ref : i >= ref; circle = 1 <= ref ? ++i : --i) {
        rotateAroundPoint(parentCircleRadius, s / 2, 2 * Math.PI / numberOfCircles);
        context.beginPath();
        context.arc(r, s / 2, r, angleStart, angleEnd);
        context.stroke();
        if (fractalArray.length > 1) {
          results.push(drawFractal(r, context, fractalArray.slice(1)));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    return drawFractal(s / 2, context, [11, 4, 5]);
  };

  drawFractal(400, 2);

}).call(this);
